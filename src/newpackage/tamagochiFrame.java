/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newpackage;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.channels.FileChannel;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;

/**
 *
 * @author Gebel
 */
public class tamagochiFrame extends javax.swing.JFrame {

    /**
     * Creates new form tamagochiFrame
     */
    /*falta que la ilusion instantanea cambie el icono
    
    
    y falta el login
    y cambiar contraseña*/
    ArrayList<JButton> prueba; //almaceno todos los botones correspondientes a una entidad para estadisticas !!
    ArrayList<JButton> del; //almaceno el boton de borrar !!!!!!
    ArrayList<JButton> cuidadoLista; // almaceno botones para cuidar !!!!!

    ArrayList<Object> list; //almacenar todos los objetos 
    ArrayList<Object> listAux;
    ArrayList<JPanel> manejarPaneles; // almaceni paneles

    JScrollPane scrollPane;

    boolean gallo, gato, perro;
    Gallo inst;
    Gato inst2;
    Perro inst3;
    boolean cont = true;

    public tamagochiFrame() {
        this.prueba = new ArrayList<>();
        initComponents();
        this.list = new ArrayList<>();
        this.manejarPaneles = new ArrayList<>();
        this.del = new ArrayList<>();
        this.cuidadoLista = new ArrayList<>(); //adjudicar vistas????????????
        frNuevoPersonaje.setLocationRelativeTo(null);
        this.listAux = new ArrayList<>();
        gallo = false;
        gato = false;
        perro = false;
        btnEnergia.setIcon(new ImageIcon(new ImageIcon("src/pqimg/energiaIcon.png").getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH)));
        btnHambre.setIcon(new ImageIcon(new ImageIcon("src/pqimg/hambreIcon.png").getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH)));
        btnFelicidad.setIcon(new ImageIcon(new ImageIcon("src/pqimg/felicidadIcon.png").getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH)));
        btnFuerza.setIcon(new ImageIcon(new ImageIcon("src/pqimg/fuerzaIcon.png").getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH)));
        btnSuciedad.setIcon(new ImageIcon(new ImageIcon("src/pqimg/suciedadIcon.png").getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH)));
        btnSed.setIcon(new ImageIcon(new ImageIcon("src/pqimg/sedIcon.png").getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH)));
        btnSalir.setIcon(new ImageIcon(new ImageIcon("src/pqimg/salirIcon.png").getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frNuevoPersonaje = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        rb1 = new javax.swing.JRadioButton();
        rb2 = new javax.swing.JRadioButton();
        rb3 = new javax.swing.JRadioButton();
        btnCrear = new javax.swing.JButton();
        grpPersBtns = new javax.swing.ButtonGroup();
        frJuego = new javax.swing.JFrame();
        jPanel5 = new javax.swing.JPanel();
        btnEnergia = new javax.swing.JButton();
        brEnergia = new javax.swing.JProgressBar();
        btnHambre = new javax.swing.JButton();
        brHambre = new javax.swing.JProgressBar();
        btnSed = new javax.swing.JButton();
        brSed = new javax.swing.JProgressBar();
        btnFelicidad = new javax.swing.JButton();
        brFelicidad = new javax.swing.JProgressBar();
        btnFuerza = new javax.swing.JButton();
        brFuerza = new javax.swing.JProgressBar();
        btnSuciedad = new javax.swing.JButton();
        brSuciedad = new javax.swing.JProgressBar();
        btnAtributoExt = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        brAtributoExtra = new javax.swing.JProgressBar();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnCmbContra = new javax.swing.JButton();
        btnNewPers = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        frNuevoPersonaje.setMinimumSize(new java.awt.Dimension(325, 187));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setMinimumSize(new java.awt.Dimension(325, 142));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 153));
        jLabel4.setText("¿Qué personaje quiere crear?");

        grpPersBtns.add(rb1);
        rb1.setForeground(new java.awt.Color(0, 153, 153));
        rb1.setText("Gallo");

        grpPersBtns.add(rb2);
        rb2.setForeground(new java.awt.Color(0, 153, 153));
        rb2.setText("Gato");
        rb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb2ActionPerformed(evt);
            }
        });

        grpPersBtns.add(rb3);
        rb3.setForeground(new java.awt.Color(0, 153, 153));
        rb3.setText("Perro");

        btnCrear.setBackground(new java.awt.Color(204, 204, 0));
        btnCrear.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCrear.setForeground(new java.awt.Color(0, 0, 0));
        btnCrear.setText("Crear personaje");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCrear, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(65, 65, 65)
                            .addComponent(jLabel4))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(132, 132, 132)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(rb3)
                                .addComponent(rb2)
                                .addComponent(rb1)))))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rb1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rb2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rb3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCrear)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout frNuevoPersonajeLayout = new javax.swing.GroupLayout(frNuevoPersonaje.getContentPane());
        frNuevoPersonaje.getContentPane().setLayout(frNuevoPersonajeLayout);
        frNuevoPersonajeLayout.setHorizontalGroup(
            frNuevoPersonajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        frNuevoPersonajeLayout.setVerticalGroup(
            frNuevoPersonajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        frJuego.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        frJuego.setMinimumSize(new java.awt.Dimension(429, 452));
        frJuego.setResizable(false);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setMinimumSize(new java.awt.Dimension(395, 396));

        btnEnergia.setBackground(new java.awt.Color(255, 255, 255));
        btnEnergia.setBorderPainted(false);
        btnEnergia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnergiaActionPerformed(evt);
            }
        });

        btnHambre.setBackground(new java.awt.Color(255, 255, 255));
        btnHambre.setBorderPainted(false);
        btnHambre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHambreActionPerformed(evt);
            }
        });

        btnSed.setBackground(new java.awt.Color(255, 255, 255));
        btnSed.setBorderPainted(false);
        btnSed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSedActionPerformed(evt);
            }
        });

        btnFelicidad.setBackground(new java.awt.Color(255, 255, 255));
        btnFelicidad.setBorderPainted(false);
        btnFelicidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFelicidadActionPerformed(evt);
            }
        });

        btnFuerza.setBackground(new java.awt.Color(255, 255, 255));
        btnFuerza.setBorderPainted(false);
        btnFuerza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFuerzaActionPerformed(evt);
            }
        });

        btnSuciedad.setBackground(new java.awt.Color(255, 255, 255));
        btnSuciedad.setBorderPainted(false);
        btnSuciedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuciedadActionPerformed(evt);
            }
        });

        btnAtributoExt.setBackground(new java.awt.Color(255, 255, 255));
        btnAtributoExt.setBorderPainted(false);
        btnAtributoExt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtributoExtActionPerformed(evt);
            }
        });

        btnSalir.setBackground(new java.awt.Color(255, 255, 255));
        btnSalir.setBorderPainted(false);
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 153, 153));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(brHambre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(brEnergia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnEnergia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnHambre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnFuerza, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(brFuerza, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSed, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(brSed, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(brSuciedad, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnSuciedad, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(108, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnFelicidad, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(brFelicidad, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(brAtributoExtra, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAtributoExt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(112, 112, 112)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnFelicidad, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap(54, Short.MAX_VALUE)
                                .addComponent(btnEnergia, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(brFelicidad, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(brEnergia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnFuerza, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnHambre, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(brFuerza, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(brHambre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSuciedad, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSed, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(brSed, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(brSuciedad, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(4, 4, 4)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btnAtributoExt, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(brAtributoExtra, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57))
        );

        javax.swing.GroupLayout frJuegoLayout = new javax.swing.GroupLayout(frJuego.getContentPane());
        frJuego.getContentPane().setLayout(frJuegoLayout);
        frJuegoLayout.setHorizontalGroup(
            frJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        frJuegoLayout.setVerticalGroup(
            frJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(50, 174, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Usuario");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("¿Qué desea hacer?");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Bienvenido");

        btnCmbContra.setBackground(Color.YELLOW);
        btnCmbContra.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCmbContra.setForeground(new java.awt.Color(0, 0, 0));
        btnCmbContra.setText("Cambiar contraseña");
        btnCmbContra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCmbContraActionPerformed(evt);
            }
        });

        btnNewPers.setBackground(Color.YELLOW);
        btnNewPers.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnNewPers.setForeground(new java.awt.Color(0, 0, 0));
        btnNewPers.setText("Crear nuevo personaje");
        btnNewPers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewPersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnNewPers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCmbContra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(33, 33, 33)
                .addComponent(btnCmbContra)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNewPers)
                .addContainerGap(159, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 240, -1));

        jScrollPane2.setBorder(null);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(jPanel3);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(239, 262, 593, 100));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));

        jLabel7.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(105, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, -4, 600, 370));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCmbContraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCmbContraActionPerformed
        try {
            ////contraseña cambiar
            StringBuffer inputBuffer = new StringBuffer();
            String lectorTxt;
            String aux[] = new String[2];
            File infoLoginTxt = new File("login.txt");
            BufferedReader txtLinea = new BufferedReader(new FileReader(infoLoginTxt));
            while ((lectorTxt = txtLinea.readLine()) != null) {
                inputBuffer.append(lectorTxt);
                aux = lectorTxt.split(",");
            }
            txtLinea.close();
            String loginInfo = inputBuffer.toString();
            String nuevaCont = JOptionPane.showInputDialog("introduce tu nueva contraseña: ");
            loginInfo = loginInfo.replace(aux[1], nuevaCont);
            FileOutputStream fileOut = new FileOutputStream("login.txt");
            fileOut.write(loginInfo.getBytes());
            fileOut.close();
            JOptionPane.showMessageDialog(rootPane, "Contraseña cambiada correctamente");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(tamagochiFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(tamagochiFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnCmbContraActionPerformed

    private void btnNewPersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewPersActionPerformed
        frNuevoPersonaje.setVisible(true);
    }//GEN-LAST:event_btnNewPersActionPerformed

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        if (rb1.isSelected()) { //bautizar mascota con joptionPane
            String asignarNombre = JOptionPane.showInputDialog("instroduzca el nombre de la mascota");
            list.add(new Gallo(100, 100, 100, 100, 100, 100, asignarNombre,
                    jLabel5, 100, jLabel7, jLabel6, brEnergia, brHambre, brSed, brFelicidad, brFuerza, brSuciedad, brAtributoExtra,
                    btnEnergia, btnHambre, btnSed, btnFelicidad, btnFuerza, btnSuciedad, btnAtributoExt)); //creo la instancia
            Gallo auts = (Gallo) list.get(list.size() - 1);
            JLabel datos = new JLabel();
            datos.setText(asignarNombre); //asignamos nombre al panel grid
            JButton boton = new JButton(); //se crean los botones de estadistica
            boton.setText("mostrar estadisticas");
            boton.setBackground(Color.YELLOW);

            JButton borrarObj = new JButton(); //se crean los botones de borrar
            borrarObj.setText("borrar tamagochi");
            borrarObj.setBackground(Color.YELLOW);

            JButton cuidar = new JButton(); //boton pa cuidar tamagochi
            cuidar.setText("jugar");
            cuidar.setBackground(Color.YELLOW);

            prueba.add(boton); //utilizar arraylist para guardar botones
            del.add(borrarObj); //de esa manera al eliminar componentes, borras todo//y tienes la misma direccion de memoria
            cuidadoLista.add(cuidar);
            //listeners, borrar, mostrar estadisticas y mostrar vista propia
            boton.addActionListener((ActionEvent e) -> {
                int aux = prueba.indexOf(boton);
                JButton tempBotonText = prueba.get(aux);
                Gallo autsi = (Gallo) list.get(aux);
                if (autsi.isMostrar() == false) {
                    jLabel5.setText(autsi.ilusionInstantanea());
                    autsi.setMostrar(true);
                    tempBotonText.setText("ocultar estadisticas");
                    for (int j = 0; j < prueba.size(); j++) {
                        if (j == prueba.indexOf(boton)) {
                            continue;
                        } else {
                            JButton pivote = prueba.get(j);
                            pivote.setEnabled(false);
                        }
                    }
                } else {
                    autsi.setMostrar(false);
                    tempBotonText.setText("mostrar estadisticas");

                    jLabel5.setText(" ");
                    jLabel7.setIcon(null);
                    for (int j = 0; j < prueba.size(); j++) {
                        if (j == prueba.indexOf(boton)) {
                            continue;
                        } else {
                            JButton pivote = prueba.get(j);
                            pivote.setEnabled(true);
                        }
                    }
                }
            });
            cuidar.addActionListener((ActionEvent e) -> {
                int aux = cuidadoLista.indexOf(cuidar);
                inst = (Gallo) list.get(aux);// obtengo el animal exacto
                System.out.println(inst.getClass().getName());
                gallo = true;
                jLabel8.setText(inst.nombre);
                if (inst.isVivo() == false) {
                    JOptionPane.showMessageDialog(rootPane, "ya está muerto, no puedes jugar con el");
                    gallo=false;
                } else {
                    inst.setCorriendo(false);
                    // autsi.setMostrar(false);
                    inst.setearBt();
                    brEnergia.setValue(inst.getEnergia());
                    brHambre.setValue(inst.getHambre());
                    brSed.setValue(inst.getSed());
                    brFelicidad.setValue(inst.getFelicidad());
                    brFuerza.setValue(inst.getFuerza());
                    brSuciedad.setValue(inst.getSuciedad());
                    brAtributoExtra.setValue(inst.getAgresividad()); ////atributo extra
                    inst.setCorriendo(true);
                    btnAtributoExt.setIcon(new ImageIcon(new ImageIcon("src/pqimg/agresividadIcon.png").getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH)));
                    //autsi.setMostrar(true);
                    frJuego.setVisible(true);
                    inst.setShowing(true);
                }
            });
            borrarObj.addActionListener((ActionEvent e) -> {
                int aux = del.indexOf(borrarObj); //los elementos comparten el mismo indice
                Gallo autsi = (Gallo) list.get(aux); //almaceno el objeto actual we
                JPanel temp = manejarPaneles.get(aux); //me va a permitir utilizar exclusivamente ese panel y remover sus componentes
                autsi.detenerHilo = false; //detengo su conteo.
                autsi.stop();
                del.remove(aux); //borro el boton actual de borrado
                list.remove(aux); //remuevo el objeto
                prueba.remove(aux); //remuevo el boton de estadisticas
                cuidadoLista.remove(aux);
                temp.removeAll();
                temp.revalidate();
                temp.repaint();
                manejarPaneles.remove(aux); //elimino el subpanel de vista
                jPanel3.remove(aux); //remuevo todos los rastros
                jScrollPane2.revalidate();
                jScrollPane2.repaint();
                jPanel3.revalidate();
                jPanel3.repaint(); //actualizo todo por si las dudas
                jLabel5.setText(" ");
                jLabel7.setIcon(null);
            });

            final JPanel newPane2 = new JPanel(); //puedo añadir 3 botones en un grid celda a gueboo
            newPane2.setLayout(new GridLayout(3, 1));
            newPane2.add(boton); //añadimos los botones que queramos, luego podemos definir su función
            newPane2.add(borrarObj);
            newPane2.add(cuidar);
            newPane2.setBackground(Color.WHITE);

            JLabel icono = new JLabel(); //crear imagen del mono
            icono.setIcon(new ImageIcon(new ImageIcon("src/pqimg/gallo.png").getImage().getScaledInstance(95, 95, Image.SCALE_SMOOTH)));

            final JPanel newPanel = new JPanel(); //este es mi panel principal, respeta los ordenes 
            newPanel.setLayout(new GridLayout(1, 3));
            newPanel.add(icono);//imagen del mono
            newPanel.setBackground(Color.WHITE);
            newPanel.add(datos); //label nombre del objeto
            newPanel.add(newPane2); // añadir el panel con los botones   

            manejarPaneles.add(newPanel);//se guarda el conjunto de paneles
            jPanel3.add(manejarPaneles.get(manejarPaneles.size() - 1));//se añade al panel de la paleta desde el arraylist, el ultimo
            jPanel3.revalidate();
            jPanel3.repaint();
            jScrollPane2.revalidate();
            jScrollPane2.repaint(); //se actualizan las ventanas
            auts.start();// se empieza el hilo

        } else if (rb2.isSelected()) {
            String asignarNombre = JOptionPane.showInputDialog("instroduzca el nombre de la mascota");
            list.add(new Gato(100, 100, 100, 100, 100, 100, asignarNombre,
                    jLabel5, 100, jLabel7, jLabel6, brEnergia, brHambre, brSed, brFelicidad, brFuerza, brSuciedad, brAtributoExtra,
                    btnEnergia, btnHambre, btnSed, btnFelicidad, btnFuerza, btnSuciedad, btnAtributoExt)); //creo la instancia
            Gato auts = (Gato) list.get(list.size() - 1);
            JLabel datos = new JLabel();
            datos.setText(asignarNombre); //asignamos nombre al panel grid
            JButton boton = new JButton(); //se crean los botones de estadistica
            boton.setText("mostrar estadisticas");
            boton.setBackground(Color.YELLOW);

            JButton borrarObj = new JButton(); //se crean los botones de borrar
            borrarObj.setText("borrar tamagochi");
            borrarObj.setBackground(Color.YELLOW);

            JButton cuidar = new JButton(); //boton pa cuidar tamagochi
            cuidar.setText("jugar");
            cuidar.setBackground(Color.YELLOW);

            prueba.add(boton); //utilizar arraylist para guardar botones
            del.add(borrarObj); //de esa manera al eliminar componentes, borras todo//y tienes la misma direccion de memoria
            cuidadoLista.add(cuidar);
            //listeners, borrar, mostrar estadisticas y mostrar vista propia
            boton.addActionListener((ActionEvent e) -> {
                int aux = prueba.indexOf(boton);
                JButton tempBotonText = prueba.get(aux);
                Gato autsi = (Gato) list.get(aux);
                if (autsi.isMostrar() == false) {
                    jLabel5.setText(autsi.ilusionInstantanea());
                    autsi.setMostrar(true);
                    tempBotonText.setText("ocultar estadisticas");
                    for (int j = 0; j < prueba.size(); j++) {
                        if (j == prueba.indexOf(boton)) {
                            continue;
                        } else {
                            JButton pivote = prueba.get(j);
                            pivote.setEnabled(false);
                        }
                    }
                } else {
                    autsi.setMostrar(false);
                    tempBotonText.setText("mostrar estadisticas");
                    jLabel5.setText(" ");
                    jLabel7.setIcon(null);
                    for (int j = 0; j < prueba.size(); j++) {
                        if (j == prueba.indexOf(boton)) {
                            continue;
                        } else {
                            JButton pivote = prueba.get(j);
                            pivote.setEnabled(true);
                        }
                    }
                }
            });
            cuidar.addActionListener((ActionEvent e) -> {
                int aux = cuidadoLista.indexOf(cuidar);
                inst2 = (Gato) list.get(aux);// obtengo el animal exacto
                System.out.println(inst2.getClass().getName());
                gato = true;
                jLabel8.setText(inst2.nombre);
                if (inst2.isVivo() == false) {
                    JOptionPane.showMessageDialog(rootPane, "ya está muerto, no puedes jugar con el");
                    gato=false;
                } else {
                    inst2.setCorriendo(false);
                    inst2.setearBt();
                    brEnergia.setValue(inst2.getEnergia());
                    brHambre.setValue(inst2.getHambre());
                    brSed.setValue(inst2.getSed());
                    brFelicidad.setValue(inst2.getFelicidad());
                    brFuerza.setValue(inst2.getFuerza());
                    brSuciedad.setValue(inst2.getSuciedad());
                    brAtributoExtra.setValue(inst2.getTernura()); ////atributo extra
                    inst2.setCorriendo(true);
                    btnAtributoExt.setIcon(new ImageIcon(new ImageIcon("src/pqimg/ternuraIcon.png").getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH)));
                    frJuego.setVisible(true);
                    inst2.setShowing(true);
                }

            });
            borrarObj.addActionListener((ActionEvent e) -> {
                int aux = del.indexOf(borrarObj); //los elementos comparten el mismo indice
                Gato autsi = (Gato) list.get(aux); //almaceno el objeto actual we
                JPanel temp = manejarPaneles.get(aux); //me va a permitir utilizar exclusivamente ese panel y remover sus componentes
                autsi.detenerHilo = false; //detengo su conteo.
                autsi.stop();
                del.remove(aux); //borro el boton actual de borrado
                list.remove(aux); //remuevo el objeto
                prueba.remove(aux); //remuevo el boton de estadisticas
                cuidadoLista.remove(aux);
                temp.removeAll();
                temp.revalidate();
                temp.repaint();
                manejarPaneles.remove(aux); //elimino el subpanel de vista
                jPanel3.remove(aux); //remuevo todos los rastros
                jScrollPane2.revalidate();
                jScrollPane2.repaint();
                jPanel3.revalidate();
                jPanel3.repaint(); //actualizo todo por si las dudas
                jLabel5.setText(" ");
                jLabel7.setIcon(null);
            });

            final JPanel newPane2 = new JPanel(); //puedo añadir 3 botones en un grid celda a gueboo
            newPane2.setLayout(new GridLayout(3, 1));
            newPane2.add(boton); //añadimos los botones que queramos, luego podemos definir su función
            newPane2.add(borrarObj);
            newPane2.add(cuidar);
            newPane2.setBackground(Color.WHITE);

            JLabel icono = new JLabel(); //crear imagen del mono
            icono.setIcon(new ImageIcon(new ImageIcon("src/pqimg/gato.png").getImage().getScaledInstance(92, 92, Image.SCALE_SMOOTH)));

            final JPanel newPanel = new JPanel(); //este es mi panel principal, respeta los ordenes 
            newPanel.setLayout(new GridLayout(1, 3));
            newPanel.add(icono);//imagen del mono
            newPanel.setBackground(Color.WHITE);
            newPanel.add(datos); //label nombre del objeto
            newPanel.add(newPane2); // añadir el panel con los botones   

            manejarPaneles.add(newPanel);//se guarda el conjunto de paneles
            jPanel3.add(manejarPaneles.get(manejarPaneles.size() - 1));//se añade al panel de la paleta desde el arraylist, el ultimo
            jPanel3.revalidate();
            jPanel3.repaint();
            jScrollPane2.revalidate();
            jScrollPane2.repaint(); //se actualizan las ventanas
            auts.start();// se empieza el hilo

        } else if (rb3.isSelected()) {
            String asignarNombre = JOptionPane.showInputDialog("instroduzca el nombre de la mascota");
            list.add(new Perro(100, 100, 100, 100, 100, 100, asignarNombre,
                    jLabel5, 100, jLabel7, jLabel6, brEnergia, brHambre, brSed, brFelicidad, brFuerza, brSuciedad, brAtributoExtra,
                    btnEnergia, btnHambre, btnSed, btnFelicidad, btnFuerza, btnSuciedad, btnAtributoExt)); //creo la instancia
            Perro auts = (Perro) list.get(list.size() - 1);
            JLabel datos = new JLabel();
            datos.setText(asignarNombre); //asignamos nombre al panel grid
            JButton boton = new JButton(); //se crean los botones de estadistica
            boton.setText("mostrar estadisticas");
            boton.setBackground(Color.YELLOW);

            JButton borrarObj = new JButton(); //se crean los botones de borrar
            borrarObj.setText("borrar tamagochi");
            borrarObj.setBackground(Color.YELLOW);

            JButton cuidar = new JButton(); //boton pa cuidar tamagochi
            cuidar.setText("jugar");
            cuidar.setBackground(Color.YELLOW);

            prueba.add(boton); //utilizar arraylist para guardar botones
            del.add(borrarObj); //de esa manera al eliminar componentes, borras todo//y tienes la misma direccion de memoria
            cuidadoLista.add(cuidar);
            //listeners, borrar, mostrar estadisticas y mostrar vista propia
            boton.addActionListener((ActionEvent e) -> {
                int aux = prueba.indexOf(boton);
                JButton tempBotonText = prueba.get(aux);
                Perro autsi = (Perro) list.get(aux);
                if (autsi.isMostrar() == false) {
                    jLabel5.setText(autsi.ilusionInstantanea());
                    autsi.setMostrar(true);
                    tempBotonText.setText("ocultar estadisticas");
                    for (int j = 0; j < prueba.size(); j++) {
                        if (j == prueba.indexOf(boton)) {
                            continue;
                        } else {
                            JButton pivote = prueba.get(j);
                            pivote.setEnabled(false);
                        }
                    }
                } else {
                    autsi.setMostrar(false);
                    tempBotonText.setText("mostrar estadisticas");
                    jLabel5.setText(" ");
                    jLabel7.setIcon(null);
                    for (int j = 0; j < prueba.size(); j++) {
                        if (j == prueba.indexOf(boton)) {
                            continue;
                        } else {
                            JButton pivote = prueba.get(j);
                            pivote.setEnabled(true);
                        }
                    }
                }
            });
            cuidar.addActionListener((ActionEvent e) -> {
                int aux = cuidadoLista.indexOf(cuidar);
                inst3 = (Perro) list.get(aux);// obtengo el animal exacto
                System.out.println(inst3.getClass().getName());
                perro = true;
                jLabel8.setText(inst3.nombre);
                if (inst3.isVivo() == false) {
                    JOptionPane.showMessageDialog(rootPane, "ya está muerto, no puedes jugar con el");
                    perro=false;
                } else {
                    inst3.setCorriendo(false);
                    inst3.setearBt();
                    brEnergia.setValue(inst3.getEnergia());
                    brHambre.setValue(inst3.getHambre());
                    brSed.setValue(inst3.getSed());
                    brFelicidad.setValue(inst3.getFelicidad());
                    brFuerza.setValue(inst3.getFuerza());
                    brSuciedad.setValue(inst3.getSuciedad());
                    brAtributoExtra.setValue(inst3.getGanasDeCagar()); ////atributo extra
                    inst3.setCorriendo(true);
                    btnAtributoExt.setIcon(new ImageIcon(new ImageIcon("src/pqimg/ganasDeCagarIcon.png").getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH)));
                    frJuego.setVisible(true);
                    inst3.setShowing(true);

                }

            });
            borrarObj.addActionListener((ActionEvent e) -> {
                int aux = del.indexOf(borrarObj); //los elementos comparten el mismo indice
                Perro autsi = (Perro) list.get(aux); //almaceno el objeto actual we
                JPanel temp = manejarPaneles.get(aux); //me va a permitir utilizar exclusivamente ese panel y remover sus componentes
                autsi.detenerHilo = false; //detengo su conteo.
                autsi.stop();
                del.remove(aux); //borro el boton actual de borrado
                list.remove(aux); //remuevo el objeto
                prueba.remove(aux); //remuevo el boton de estadisticas
                cuidadoLista.remove(aux);
                temp.removeAll();
                temp.revalidate();
                temp.repaint();
                manejarPaneles.remove(aux); //elimino el subpanel de vista
                jPanel3.remove(aux); //remuevo todos los rastros
                jScrollPane2.revalidate();
                jScrollPane2.repaint();
                jPanel3.revalidate();
                jPanel3.repaint(); //actualizo todo por si las dudas
                jLabel5.setText(" ");
                jLabel7.setIcon(null);
            });

            final JPanel newPane2 = new JPanel(); //puedo añadir 3 botones en un grid celda a gueboo
            newPane2.setLayout(new GridLayout(3, 1));
            newPane2.add(boton); //añadimos los botones que queramos, luego podemos definir su función
            newPane2.add(borrarObj);
            newPane2.add(cuidar);
            newPane2.setBackground(Color.WHITE);

            JLabel icono = new JLabel(); //crear imagen del mono
            icono.setIcon(new ImageIcon(new ImageIcon("src/pqimg/perro.png").getImage().getScaledInstance(89, 89, Image.SCALE_SMOOTH)));

            final JPanel newPanel = new JPanel(); //este es mi panel principal, respeta los ordenes 
            newPanel.setLayout(new GridLayout(1, 3));
            newPanel.add(icono);//imagen del mono
            newPanel.setBackground(Color.WHITE);
            newPanel.add(datos); //label nombre del objeto
            newPanel.add(newPane2); // añadir el panel con los botones   

            manejarPaneles.add(newPanel);//se guarda el conjunto de paneles
            jPanel3.add(manejarPaneles.get(manejarPaneles.size() - 1));//se añade al panel de la paleta desde el arraylist, el ultimo
            jPanel3.revalidate();
            jPanel3.repaint();
            jScrollPane2.revalidate();
            jScrollPane2.repaint(); //se actualizan las ventanas
            auts.start();// se empieza el hilo
        }
        grpPersBtns.clearSelection();
        frNuevoPersonaje.setVisible(false);
    }//GEN-LAST:event_btnCrearActionPerformed

    private void rb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rb2ActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        if (gallo == true) {
            gallo = false;
            inst.setShowing(false);
            inst = null; //eliminamos el objeto para evitar duplicados por si no funciona el garbage collector
        } else if (gato == true) {
            gato = false;
            inst2.setShowing(false);
            inst2 = null;
        } else if (perro == true) {
            perro = false;
            inst3.setShowing(false);
            inst3 = null;
        }
        frJuego.setVisible(false);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnEnergiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnergiaActionPerformed
        if (gallo == true) {
            inst.setearEnergia();
            System.out.println(inst.ilusionInstantanea());
        } else if (gato == true) {
            inst2.setearEnergia();
            System.out.println(inst2.ilusionInstantanea());
        } else if (perro == true) {
            inst3.setearEnergia();
            System.out.println(inst3.ilusionInstantanea());
        }
    }//GEN-LAST:event_btnEnergiaActionPerformed

    private void btnHambreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHambreActionPerformed
        if (gallo == true) {
            inst.setearHambre();
            System.out.println(inst.ilusionInstantanea());
        } else if (gato == true) {
            inst2.setearHambre();
            System.out.println(inst2.ilusionInstantanea());
        } else if (perro == true) {
            inst3.setearHambre();
            System.out.println(inst3.ilusionInstantanea());
        }

    }//GEN-LAST:event_btnHambreActionPerformed

    private void btnSedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSedActionPerformed
        if (gallo == true) {
            inst.setearSed();
            System.out.println(inst.ilusionInstantanea());
        } else if (gato == true) {
            inst2.setearSed();
            System.out.println(inst2.ilusionInstantanea());
        } else if (perro == true) {
            inst3.setearSed();
            System.out.println(inst3.ilusionInstantanea());
        }
    }//GEN-LAST:event_btnSedActionPerformed

    private void btnFelicidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFelicidadActionPerformed
        if (gallo == true) {
            inst.setearFelicidad();
            System.out.println(inst.ilusionInstantanea());
        } else if (gato == true) {
            inst2.setearFelicidad();
            System.out.println(inst2.ilusionInstantanea());
        } else if (perro == true) {
            inst3.setearFelicidad();
            System.out.println(inst3.ilusionInstantanea());
        }
    }//GEN-LAST:event_btnFelicidadActionPerformed

    private void btnFuerzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFuerzaActionPerformed
        if (gallo == true) {
            inst.setearFuerza();
            System.out.println(inst.ilusionInstantanea());
        } else if (gato == true) {
            inst2.setearFuerza();
            System.out.println(inst2.ilusionInstantanea());
        } else if (perro == true) {
            inst3.setearFuerza();
            System.out.println(inst3.ilusionInstantanea());
        }
    }//GEN-LAST:event_btnFuerzaActionPerformed

    private void btnSuciedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuciedadActionPerformed
        if (gallo == true) {
            inst.setearSuciedad();
            System.out.println(inst.ilusionInstantanea());
        } else if (gato == true) {
            inst2.setearSuciedad();
            System.out.println(inst2.ilusionInstantanea());
        } else if (perro == true) {
            inst3.setearSuciedad();
            System.out.println(inst3.ilusionInstantanea());
        }
    }//GEN-LAST:event_btnSuciedadActionPerformed

    private void btnAtributoExtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtributoExtActionPerformed
        if (gallo == true) {
            inst.setearAtributoExt();
            System.out.println(inst.ilusionInstantanea());
        } else if (gato == true) {
            inst2.setearAtributoExt();
            System.out.println(inst2.ilusionInstantanea());
        } else if (perro == true) {
            inst3.setearAtributoExt();
            System.out.println(inst3.ilusionInstantanea());
        }
    }//GEN-LAST:event_btnAtributoExtActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (list.isEmpty()) {
            System.exit(0);
        } else {
            int confirm = JOptionPane.showOptionDialog(this,
                    "¿Deseas guardar tus objetos antes de salir?",
                    "Confirmación", JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (confirm == JOptionPane.OK_OPTION) {
                try {
                    ObjectOutputStream mascota = new ObjectOutputStream(new FileOutputStream("mascotas.txt"));
                    mascota.writeObject(list);
                    mascota.close();
                    JOptionPane.showMessageDialog(this, "Guardado exitoso");
                    System.exit(0);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(tamagochiFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(tamagochiFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (confirm == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(this, "no guardó nada, hasta pronto");
                System.exit(0);
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        File borrar = new File("mascotas.txt");
        try {
            if (new FileInputStream("mascotas.txt").getChannel().size() != 0) {
                int confirm = JOptionPane.showOptionDialog(this,
                        "¿Deseas restaurar las mascotas de la sesión anterior?",
                        "Confirmación", JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, null, null);

                if (confirm == JOptionPane.OK_OPTION) {
                    try {
                        FileInputStream fis = new FileInputStream("mascotas.txt");
                        ObjectInputStream ois = new ObjectInputStream(fis);
                        listAux = (ArrayList) ois.readObject();
                        ois.close();
                        fis.close();
                        for (Object i : listAux) {
                            if (i.getClass().getName().equals("newpackage.Gallo")) {
                                Gallo gom = (Gallo) i;
                                list.add(new Gallo(gom.energia, gom.hambre, gom.sed, gom.felicidad, gom.fuerza, gom.suciedad, gom.nombre, jLabel5, gom.agresividad,
                                        jLabel7, jLabel6, brEnergia, brHambre, brSed, brFelicidad, brFuerza, brSuciedad, brAtributoExtra,
                                        btnEnergia, btnHambre, btnSed, btnFelicidad, btnFuerza, btnSuciedad, btnAtributoExt));
                                Gallo auts = (Gallo) list.get(list.size() - 1);
                                gom = null;
                                JLabel datos = new JLabel();
                                datos.setText(auts.nombre); //asignamos nombre al panel grid
                                JButton boton = new JButton(); //se crean los botones de estadistica
                                boton.setText("mostrar estadisticas");
                                boton.setBackground(Color.YELLOW);

                                JButton borrarObj = new JButton(); //se crean los botones de borrar
                                borrarObj.setText("borrar tamagochi");
                                borrarObj.setBackground(Color.YELLOW);

                                JButton cuidar = new JButton(); //boton pa cuidar tamagochi
                                cuidar.setText("jugar");
                                cuidar.setBackground(Color.YELLOW);

                                prueba.add(boton); //utilizar arraylist para guardar botones
                                del.add(borrarObj); //de esa manera al eliminar componentes, borras todo//y tienes la misma direccion de memoria
                                cuidadoLista.add(cuidar);
                                //listeners, borrar, mostrar estadisticas y mostrar vista propia
                                boton.addActionListener((ActionEvent e) -> {
                                    int aux = prueba.indexOf(boton);
                                    JButton tempBotonText = prueba.get(aux);
                                    Gallo autsi = (Gallo) list.get(aux);
                                    if (autsi.isMostrar() == false) {
                                        jLabel5.setText(autsi.ilusionInstantanea());
                                        autsi.setMostrar(true);
                                        tempBotonText.setText("ocultar estadisticas");
                                        for (int j = 0; j < prueba.size(); j++) {
                                            if (j == prueba.indexOf(boton)) {
                                                continue;
                                            } else {
                                                JButton pivote = prueba.get(j);
                                                pivote.setEnabled(false);
                                            }
                                        }
                                    } else {
                                        autsi.setMostrar(false);
                                        tempBotonText.setText("mostrar estadisticas");
                                        jLabel5.setText(" ");
                                        jLabel7.setIcon(null);
                                        for (int j = 0; j < prueba.size(); j++) {
                                            if (j == prueba.indexOf(boton)) {
                                                continue;
                                            } else {
                                                JButton pivote = prueba.get(j);
                                                pivote.setEnabled(true);
                                            }
                                        }
                                    }
                                });
                                cuidar.addActionListener((ActionEvent e) -> {
                                    int aux = cuidadoLista.indexOf(cuidar);
                                    inst = (Gallo) list.get(aux);// obtengo el animal exacto
                                    System.out.println(inst.getClass().getName());
                                    gallo = true;
                                    jLabel8.setText(inst.nombre);
                                    if (inst.isVivo() == false) {
                                        JOptionPane.showMessageDialog(rootPane, "ya está muerto, no puedes jugar con el");
                                        gallo=false;
                                    } else {
                                        inst.setCorriendo(false);
                                        // autsi.setMostrar(false);
                                        inst.setearBt();
                                        brEnergia.setValue(inst.getEnergia());
                                        brHambre.setValue(inst.getHambre());
                                        brSed.setValue(inst.getSed());
                                        brFelicidad.setValue(inst.getFelicidad());
                                        brFuerza.setValue(inst.getFuerza());
                                        brSuciedad.setValue(inst.getSuciedad());
                                        brAtributoExtra.setValue(inst.getAgresividad()); ////atributo extra
                                        inst.setCorriendo(true);
                                        btnAtributoExt.setIcon(new ImageIcon(new ImageIcon("src/pqimg/agresividadIcon.png").getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH)));
                                        //autsi.setMostrar(true);
                                        frJuego.setVisible(true);
                                        inst.setShowing(true);
                                    }
                                });
                                borrarObj.addActionListener((ActionEvent e) -> {
                                    int aux = del.indexOf(borrarObj); //los elementos comparten el mismo indice
                                    Gallo autsi = (Gallo) list.get(aux); //almaceno el objeto actual we
                                    JPanel temp = manejarPaneles.get(aux); //me va a permitir utilizar exclusivamente ese panel y remover sus componentes
                                    autsi.detenerHilo = false; //detengo su conteo.
                                    autsi.stop();
                                    del.remove(aux); //borro el boton actual de borrado
                                    list.remove(aux); //remuevo el objeto
                                    prueba.remove(aux); //remuevo el boton de estadisticas
                                    cuidadoLista.remove(aux);
                                    temp.removeAll();
                                    temp.revalidate();
                                    temp.repaint();
                                    manejarPaneles.remove(aux); //elimino el subpanel de vista
                                    jPanel3.remove(aux); //remuevo todos los rastros
                                    jScrollPane2.revalidate();
                                    jScrollPane2.repaint();
                                    jPanel3.revalidate();
                                    jPanel3.repaint(); //actualizo todo por si las dudas
                                    jLabel5.setText(" ");
                                    jLabel7.setIcon(null);
                                });

                                final JPanel newPane2 = new JPanel(); //puedo añadir 3 botones en un grid celda a gueboo
                                newPane2.setLayout(new GridLayout(3, 1));
                                newPane2.add(boton); //añadimos los botones que queramos, luego podemos definir su función
                                newPane2.add(borrarObj);
                                newPane2.add(cuidar);
                                newPane2.setBackground(Color.WHITE);

                                JLabel icono = new JLabel(); //crear imagen del mono
                                icono.setIcon(new ImageIcon(new ImageIcon("src/pqimg/gallo.png").getImage().getScaledInstance(95, 95, Image.SCALE_SMOOTH)));

                                final JPanel newPanel = new JPanel(); //este es mi panel principal, respeta los ordenes 
                                newPanel.setLayout(new GridLayout(1, 3));
                                newPanel.add(icono);//imagen del mono
                                newPanel.setBackground(Color.WHITE);
                                newPanel.add(datos); //label nombre del objeto
                                newPanel.add(newPane2); // añadir el panel con los botones   

                                manejarPaneles.add(newPanel);//se guarda el conjunto de paneles
                                jPanel3.add(manejarPaneles.get(manejarPaneles.size() - 1));//se añade al panel de la paleta desde el arraylist, el ultimo

                                auts.start();// se empieza el hilo

                            } else if (i.getClass().getName().equals("newpackage.Gato")) {
                                Gato gom = (Gato) i;
                                list.add(new Gato(gom.energia, gom.hambre, gom.sed, gom.felicidad, gom.fuerza, gom.suciedad, gom.nombre, jLabel5, gom.ternura,
                                        jLabel7, jLabel6, brEnergia, brHambre, brSed, brFelicidad, brFuerza, brSuciedad, brAtributoExtra,
                                        btnEnergia, btnHambre, btnSed, btnFelicidad, btnFuerza, btnSuciedad, btnAtributoExt));
                                Gato auts = (Gato) list.get(list.size() - 1);
                                gom = null;
                                JLabel datos = new JLabel();
                                datos.setText(auts.nombre); //asignamos nombre al panel grid
                                JButton boton = new JButton(); //se crean los botones de estadistica
                                boton.setText("mostrar estadisticas");
                                boton.setBackground(Color.YELLOW);

                                JButton borrarObj = new JButton(); //se crean los botones de borrar
                                borrarObj.setText("borrar tamagochi");
                                borrarObj.setBackground(Color.YELLOW);

                                JButton cuidar = new JButton(); //boton pa cuidar tamagochi
                                cuidar.setText("jugar");
                                cuidar.setBackground(Color.YELLOW);

                                prueba.add(boton); //utilizar arraylist para guardar botones
                                del.add(borrarObj); //de esa manera al eliminar componentes, borras todo//y tienes la misma direccion de memoria
                                cuidadoLista.add(cuidar);
                                //listeners, borrar, mostrar estadisticas y mostrar vista propia
                                boton.addActionListener((ActionEvent e) -> {
                                    int aux = prueba.indexOf(boton);
                                    JButton tempBotonText = prueba.get(aux);
                                    Gato autsi = (Gato) list.get(aux);
                                    if (autsi.isMostrar() == false) {
                                        jLabel5.setText(autsi.ilusionInstantanea());
                                        autsi.setMostrar(true);
                                        tempBotonText.setText("ocultar estadisticas");
                                        for (int j = 0; j < prueba.size(); j++) {
                                            if (j == prueba.indexOf(boton)) {
                                                continue;
                                            } else {
                                                JButton pivote = prueba.get(j);
                                                pivote.setEnabled(false);
                                            }
                                        }
                                    } else {
                                        autsi.setMostrar(false);
                                        tempBotonText.setText("mostrar estadisticas");
                                        jLabel5.setText(" ");
                                        jLabel7.setIcon(null);
                                        for (int j = 0; j < prueba.size(); j++) {
                                            if (j == prueba.indexOf(boton)) {
                                                continue;
                                            } else {
                                                JButton pivote = prueba.get(j);
                                                pivote.setEnabled(true);
                                            }
                                        }
                                    }
                                });
                                cuidar.addActionListener((ActionEvent e) -> {
                                    int aux = cuidadoLista.indexOf(cuidar);
                                    inst2 = (Gato) list.get(aux);// obtengo el animal exacto
                                    System.out.println(inst2.getClass().getName());
                                    gato = true;
                                    jLabel8.setText(inst2.nombre);
                                    if (inst2.isVivo() == false) {
                                        JOptionPane.showMessageDialog(rootPane, "ya está muerto, no puedes jugar con el");
                                        gato=false;
                                    } else {
                                        inst2.setCorriendo(false);
                                        // autsi.setMostrar(false);
                                        inst2.setearBt();
                                        brEnergia.setValue(inst2.getEnergia());
                                        brHambre.setValue(inst2.getHambre());
                                        brSed.setValue(inst2.getSed());
                                        brFelicidad.setValue(inst2.getFelicidad());
                                        brFuerza.setValue(inst2.getFuerza());
                                        brSuciedad.setValue(inst2.getSuciedad());
                                        brAtributoExtra.setValue(inst2.getTernura()); ////atributo extra
                                        inst2.setCorriendo(true);
                                        btnAtributoExt.setIcon(new ImageIcon(new ImageIcon("src/pqimg/agresividadIcon.png").getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH)));
                                        //autsi.setMostrar(true);
                                        frJuego.setVisible(true);
                                        inst2.setShowing(true);
                                    }
                                });
                                borrarObj.addActionListener((ActionEvent e) -> {
                                    int aux = del.indexOf(borrarObj); //los elementos comparten el mismo indice
                                    Gato autsi = (Gato) list.get(aux); //almaceno el objeto actual we
                                    JPanel temp = manejarPaneles.get(aux); //me va a permitir utilizar exclusivamente ese panel y remover sus componentes
                                    autsi.detenerHilo = false; //detengo su conteo.
                                    autsi.stop();
                                    del.remove(aux); //borro el boton actual de borrado
                                    list.remove(aux); //remuevo el objeto
                                    prueba.remove(aux); //remuevo el boton de estadisticas
                                    cuidadoLista.remove(aux);
                                    temp.removeAll();
                                    temp.revalidate();
                                    temp.repaint();
                                    manejarPaneles.remove(aux); //elimino el subpanel de vista
                                    jPanel3.remove(aux); //remuevo todos los rastros
                                    jScrollPane2.revalidate();
                                    jScrollPane2.repaint();
                                    jPanel3.revalidate();
                                    jPanel3.repaint(); //actualizo todo por si las dudas
                                    jLabel5.setText(" ");
                                    jLabel7.setIcon(null);
                                });

                                final JPanel newPane2 = new JPanel(); //puedo añadir 3 botones en un grid celda a gueboo
                                newPane2.setLayout(new GridLayout(3, 1));
                                newPane2.add(boton); //añadimos los botones que queramos, luego podemos definir su función
                                newPane2.add(borrarObj);
                                newPane2.add(cuidar);
                                newPane2.setBackground(Color.WHITE);

                                JLabel icono = new JLabel(); //crear imagen del mono
                                icono.setIcon(new ImageIcon(new ImageIcon("src/pqimg/gato.png").getImage().getScaledInstance(95, 95, Image.SCALE_SMOOTH)));

                                final JPanel newPanel = new JPanel(); //este es mi panel principal, respeta los ordenes 
                                newPanel.setLayout(new GridLayout(1, 3));
                                newPanel.add(icono);//imagen del mono
                                newPanel.setBackground(Color.WHITE);
                                newPanel.add(datos); //label nombre del objeto
                                newPanel.add(newPane2); // añadir el panel con los botones   

                                manejarPaneles.add(newPanel);//se guarda el conjunto de paneles
                                jPanel3.add(manejarPaneles.get(manejarPaneles.size() - 1));//se añade al panel de la paleta desde el arraylist, el ultimo

                                auts.start();// se empieza el hilo

                            } else if (i.getClass().getName().equals("newpackage.Perro")) {
                                Perro gom = (Perro) i;
                                list.add(new Perro(gom.energia, gom.hambre, gom.sed, gom.felicidad, gom.fuerza, gom.suciedad, gom.nombre, jLabel5, gom.ganasDeCagar,
                                        jLabel7, jLabel6, brEnergia, brHambre, brSed, brFelicidad, brFuerza, brSuciedad, brAtributoExtra,
                                        btnEnergia, btnHambre, btnSed, btnFelicidad, btnFuerza, btnSuciedad, btnAtributoExt));
                                Perro auts = (Perro) list.get(list.size() - 1);
                                gom = null;
                                JLabel datos = new JLabel();
                                datos.setText(auts.nombre); //asignamos nombre al panel grid
                                JButton boton = new JButton(); //se crean los botones de estadistica
                                boton.setText("mostrar estadisticas");
                                boton.setBackground(Color.YELLOW);

                                JButton borrarObj = new JButton(); //se crean los botones de borrar
                                borrarObj.setText("borrar tamagochi");
                                borrarObj.setBackground(Color.YELLOW);

                                JButton cuidar = new JButton(); //boton pa cuidar tamagochi
                                cuidar.setText("jugar");
                                cuidar.setBackground(Color.YELLOW);

                                prueba.add(boton); //utilizar arraylist para guardar botones
                                del.add(borrarObj); //de esa manera al eliminar componentes, borras todo//y tienes la misma direccion de memoria
                                cuidadoLista.add(cuidar);
                                //listeners, borrar, mostrar estadisticas y mostrar vista propia
                                boton.addActionListener((ActionEvent e) -> {
                                    int aux = prueba.indexOf(boton);
                                    JButton tempBotonText = prueba.get(aux);
                                    Perro autsi = (Perro) list.get(aux);
                                    if (autsi.isMostrar() == false) {
                                        jLabel5.setText(autsi.ilusionInstantanea());
                                        autsi.setMostrar(true);
                                        tempBotonText.setText("ocultar estadisticas");
                                        for (int j = 0; j < prueba.size(); j++) {
                                            if (j == prueba.indexOf(boton)) {
                                                continue;
                                            } else {
                                                JButton pivote = prueba.get(j);
                                                pivote.setEnabled(false);
                                            }
                                        }
                                    } else {
                                        autsi.setMostrar(false);
                                        tempBotonText.setText("mostrar estadisticas");
                                        jLabel5.setText(" ");
                                        jLabel7.setIcon(null);
                                        for (int j = 0; j < prueba.size(); j++) {
                                            if (j == prueba.indexOf(boton)) {
                                                continue;
                                            } else {
                                                JButton pivote = prueba.get(j);
                                                pivote.setEnabled(true);
                                            }
                                        }
                                    }
                                });
                                cuidar.addActionListener((ActionEvent e) -> {
                                    int aux = cuidadoLista.indexOf(cuidar);
                                    inst3 = (Perro) list.get(aux);// obtengo el animal exacto
                                    System.out.println(inst3.getClass().getName());
                                    perro = true;
                                    jLabel8.setText(inst3.nombre);
                                    if (inst3.isVivo() == false) {
                                        JOptionPane.showMessageDialog(rootPane, "ya está muerto, no puedes jugar con el");
                                        perro=false;
                                    } else {
                                        inst3.setCorriendo(false);
                                        // autsi.setMostrar(false);
                                        inst3.setearBt();
                                        brEnergia.setValue(inst3.getEnergia());
                                        brHambre.setValue(inst3.getHambre());
                                        brSed.setValue(inst3.getSed());
                                        brFelicidad.setValue(inst3.getFelicidad());
                                        brFuerza.setValue(inst3.getFuerza());
                                        brSuciedad.setValue(inst3.getSuciedad());
                                        brAtributoExtra.setValue(inst3.getGanasDeCagar()); ////atributo extra
                                        inst3.setCorriendo(true);
                                        btnAtributoExt.setIcon(new ImageIcon(new ImageIcon("src/pqimg/agresividadIcon.png").getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH)));
                                        //autsi.setMostrar(true);
                                        frJuego.setVisible(true);
                                        inst3.setShowing(true);
                                    }
                                });
                                borrarObj.addActionListener((ActionEvent e) -> {
                                    int aux = del.indexOf(borrarObj); //los elementos comparten el mismo indice
                                    Perro autsi = (Perro) list.get(aux); //almaceno el objeto actual we
                                    JPanel temp = manejarPaneles.get(aux); //me va a permitir utilizar exclusivamente ese panel y remover sus componentes
                                    autsi.detenerHilo = false; //detengo su conteo.
                                    autsi.stop();
                                    del.remove(aux); //borro el boton actual de borrado
                                    list.remove(aux); //remuevo el objeto
                                    prueba.remove(aux); //remuevo el boton de estadisticas
                                    cuidadoLista.remove(aux);
                                    temp.removeAll();
                                    temp.revalidate();
                                    temp.repaint();
                                    manejarPaneles.remove(aux); //elimino el subpanel de vista
                                    jPanel3.remove(aux); //remuevo todos los rastros
                                    jScrollPane2.revalidate();
                                    jScrollPane2.repaint();
                                    jPanel3.revalidate();
                                    jPanel3.repaint(); //actualizo todo por si las dudas
                                    jLabel5.setText(" ");
                                    jLabel7.setIcon(null);
                                });

                                final JPanel newPane2 = new JPanel(); //puedo añadir 3 botones en un grid celda a gueboo
                                newPane2.setLayout(new GridLayout(3, 1));
                                newPane2.add(boton); //añadimos los botones que queramos, luego podemos definir su función
                                newPane2.add(borrarObj);
                                newPane2.add(cuidar);
                                newPane2.setBackground(Color.WHITE);

                                JLabel icono = new JLabel(); //crear imagen del mono
                                icono.setIcon(new ImageIcon(new ImageIcon("src/pqimg/perro.png").getImage().getScaledInstance(95, 95, Image.SCALE_SMOOTH)));

                                final JPanel newPanel = new JPanel(); //este es mi panel principal, respeta los ordenes 
                                newPanel.setLayout(new GridLayout(1, 3));
                                newPanel.add(icono);//imagen del mono
                                newPanel.setBackground(Color.WHITE);
                                newPanel.add(datos); //label nombre del objeto
                                newPanel.add(newPane2); // añadir el panel con los botones   

                                manejarPaneles.add(newPanel);//se guarda el conjunto de paneles
                                jPanel3.add(manejarPaneles.get(manejarPaneles.size() - 1));//se añade al panel de la paleta desde el arraylist, el ultimo

                                auts.start();// se empieza el hilo
                            }
                        }
                        JOptionPane.showMessageDialog(rootPane, "Las mascotas de la sesión anterior se han restaurado");

                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(tamagochiFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(tamagochiFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(tamagochiFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (confirm == JOptionPane.NO_OPTION) {
                   
                        JOptionPane.showMessageDialog(rootPane, "Las mascotas de la sesión anterior se han eliminado");
                    FileChannel.open(Paths.get("mascotas.txt"), StandardOpenOption.WRITE).truncate(0).close();
                }
                jPanel3.revalidate();
                jPanel3.repaint();
                jScrollPane2.revalidate();
                jScrollPane2.repaint(); //se actualizan las ventanas
                listAux.clear();
                //borrar.delete();
                FileChannel.open(Paths.get("mascotas.txt"), StandardOpenOption.WRITE).truncate(0).close();
            } else {
                JOptionPane.showMessageDialog(rootPane, "no tiene registrado ninguna mascota de sesiones anteriores");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(tamagochiFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(tamagochiFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tamagochiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tamagochiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tamagochiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tamagochiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tamagochiFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar brAtributoExtra;
    private javax.swing.JProgressBar brEnergia;
    private javax.swing.JProgressBar brFelicidad;
    private javax.swing.JProgressBar brFuerza;
    private javax.swing.JProgressBar brHambre;
    private javax.swing.JProgressBar brSed;
    private javax.swing.JProgressBar brSuciedad;
    private javax.swing.JButton btnAtributoExt;
    private javax.swing.JButton btnCmbContra;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnEnergia;
    private javax.swing.JButton btnFelicidad;
    private javax.swing.JButton btnFuerza;
    private javax.swing.JButton btnHambre;
    private javax.swing.JButton btnNewPers;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnSed;
    private javax.swing.JButton btnSuciedad;
    private javax.swing.JFrame frJuego;
    private javax.swing.JFrame frNuevoPersonaje;
    private javax.swing.ButtonGroup grpPersBtns;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rb1;
    private javax.swing.JRadioButton rb2;
    private javax.swing.JRadioButton rb3;
    // End of variables declaration//GEN-END:variables
}
